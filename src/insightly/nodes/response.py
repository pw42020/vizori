from loguru import logger

from pydantic import BaseModel, Field
from langchain_core.runnables.config import RunnableConfig
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate

from insightly.classes import AgentState, ChatGPTNodeBase, T, SqlQueryInfo


class FunnyResponse(BaseModel):
    """Generates a funny response for unrelated questions.

    Attributes
    ----------
    response: str
        The funny response generated for the unrelated question.
    """

    response: str = Field(
        description="The funny response generated for the unrelated question."
    )


class FunnyResponseNode(ChatGPTNodeBase):
    """Class to generate a funny response for unrelated questions.

    This class is used to generate a funny response for questions that are not related
    to the database schema or SQL queries.
    """

    def __init__(self, OutputClass: type[T]) -> None:
        """
        Initialize the FunnyResponseNode class.
        """
        super().__init__(OutputClass=OutputClass)

    def init_query(self, state: AgentState, config: RunnableConfig) -> str:
        """Generate a funny response for unrelated questions.

        Parameters
        ----------
        state : AgentState
            The current state of the agent.
        config : RunnableConfig
            The configuration for the runnable.

        Returns
        -------
        str
            The funny response generated for the unrelated question.
        """
        logger.info("Generating a funny response for an unrelated question.")
        system = """You are a charming and funny assistant who responds in a playful manner.
        """
        return system

    def post_query(
        self, result: T, state: AgentState, config: RunnableConfig
    ) -> AgentState:
        """Initialize the SQL query info and log the result.

        Parameters
        ----------
        result : T
            The result of the SQL query.
        state : AgentState
            The current state of the agent.
        config : RunnableConfig
            The configuration for the runnable.

        Returns
        -------
        AgentState
            The updated state of the agent with the SQL query information.
        """
        # initialize the SQL query info
        state["sql_query_info"] = SqlQueryInfo(
            sql_query="", query_result="", query_rows=[], sql_error=False
        )
        state["sql_query_info"]["query_result"] = result.response
        logger.debug("Generated funny response.")
        return state

    def run(self, state: AgentState, config: RunnableConfig) -> AgentState:
        """Run the node to get an output and an AgentState.

        Parameters
        ----------
        state : AgentState
            The current state of the agent.
        config : RunnableConfig
            The configuration for the runnable.

        Returns
        -------
        AgentState
            The updated state of the agent with the funny response.
        """
        system = self.init_query(state, config)
        logger.info(f"Running node with question: {system}")
        result: T = self.run_chatgpt(
            question="I can't help with that unfortunately!",
            system=system,
        )
        return self.post_query(result, state, config)


class RewrittenQuestion(BaseModel):
    """Field to retrieve the rewritten question.

    Attributes
    ----------
    question: str
        The rewritten question generated by the assistant.
    """

    question: str = Field(description="The rewritten question.")


class RegenerateQueryNode(ChatGPTNodeBase):
    """Class to regenerate the SQL query by rewriting the question.

    This class is used to reformulate the original question to enable more precise SQL queries.
    """

    def __init__(self, OutputClass: type[T]) -> None:
        """
        Initialize the RegenerateQueryNode class.
        """
        super().__init__(OutputClass=OutputClass)

    def init_query(self, state: AgentState, config: RunnableConfig) -> str:
        """Regenerate the SQL query by rewriting the question.

        Parameters
        ----------
        state : AgentState
            The current state of the agent.
        config : RunnableConfig
            The configuration for the runnable.

        Returns
        -------
        str
            The system prompt to be used for the ChatOpenAI model.
        """
        logger.debug("Regenerating the SQL query by rewriting the question.")
        system = """You are an assistant that reformulates an original question to enable more precise SQL queries. Ensure that all necessary details, such as table joins, are preserved to retrieve complete and accurate data.
        """
        return system

    def run(self, state: AgentState, config: RunnableConfig) -> AgentState:
        """Run the node to get an output and an AgentState. Different compared to base class
        as the input to the human part of the model has some clarifications to what to generate.

        Parameters
        ----------
        state : AgentState
            The current state of the agent.
        config : RunnableConfig
            The configuration for the runnable.

        Returns
        -------
        AgentState
            The updated state of the agent with the rewritten question.
        """
        system = self.init_query(state, config)
        rewrite_prompt = ChatPromptTemplate.from_messages(
            [
                ("system", system),
                (
                    "human",
                    f"Original Question: {state['question']}\nReformulate the question to enable more precise SQL queries, ensuring all necessary details are preserved.",
                ),
            ]
        )
        llm = ChatOpenAI(temperature=0)
        structured_llm = llm.with_structured_output(RewrittenQuestion)
        rewriter = rewrite_prompt | structured_llm
        result = rewriter.invoke({})
        return self.post_query(result, state, config)

    def post_query(
        self, result: RewrittenQuestion, state: AgentState, config: RunnableConfig
    ):
        """adds pydantic result to the state and returns with a + 1 to the attempts

        Parameters
        ----------
        result : RewrittenQuestion
            The result of the query indicating the rewritten question.
        state : AgentState
            The state of the agent containing the question and other information.
        config : RunnableConfig
            The configuration for the runnable.

        Returns
        -------
        AgentState
            The updated state of the agent with the rewritten question.
        """
        state["question"] = result.question
        state["attempts"] += 1
        logger.debug(f"Rewritten question: {state['question']}")
        return state
